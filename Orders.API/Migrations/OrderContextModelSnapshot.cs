// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Orders.API.Infrastructure.Data;

#nullable disable

namespace Orders.API.Migrations
{
    [DbContext(typeof(OrderContext))]
    partial class OrderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Orders.API.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Orders_CustomerId");

                    b.HasIndex("OrderDate")
                        .HasDatabaseName("IX_Orders_OrderDate");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Orders_OrderNumber_Unique");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Orders_Status");

                    b.HasIndex("TotalAmount")
                        .HasDatabaseName("IX_Orders_TotalAmount");

                    b.HasIndex("CustomerId", "Status")
                        .HasDatabaseName("IX_Orders_CustomerId_Status");

                    b.HasIndex("Status", "OrderDate")
                        .HasDatabaseName("IX_Orders_Status_OrderDate");

                    b.ToTable("Orders", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-446655440001"),
                            CreatedAt = new DateTime(2024, 1, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("770e8400-e29b-41d4-a716-446655440001"),
                            CustomerName = "John Doe",
                            OrderDate = new DateTime(2024, 1, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            OrderNumber = "ORD-20240115103000",
                            Status = 0,
                            TotalAmount = 1029.98m,
                            UpdatedAt = new DateTime(2024, 1, 15, 10, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-446655440002"),
                            CreatedAt = new DateTime(2024, 1, 15, 11, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("770e8400-e29b-41d4-a716-446655440002"),
                            CustomerName = "Jane Smith",
                            OrderDate = new DateTime(2024, 1, 15, 11, 0, 0, 0, DateTimeKind.Utc),
                            OrderNumber = "ORD-20240115110000",
                            Status = 1,
                            TotalAmount = 39.98m,
                            UpdatedAt = new DateTime(2024, 1, 15, 11, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Orders.API.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("IX_OrderItems_OrderId");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_OrderItems_ProductId");

                    b.HasIndex("OrderId", "ProductId")
                        .IsUnique()
                        .HasDatabaseName("IX_OrderItems_OrderId_ProductId_Unique");

                    b.ToTable("OrderItems", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("880e8400-e29b-41d4-a716-446655440001"),
                            OrderId = new Guid("660e8400-e29b-41d4-a716-446655440001"),
                            ProductId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            ProductName = "Sample Laptop",
                            Quantity = 1,
                            UnitPrice = 999.99m
                        },
                        new
                        {
                            Id = new Guid("880e8400-e29b-41d4-a716-446655440002"),
                            OrderId = new Guid("660e8400-e29b-41d4-a716-446655440001"),
                            ProductId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            ProductName = "Wireless Mouse",
                            Quantity = 1,
                            UnitPrice = 29.99m
                        },
                        new
                        {
                            Id = new Guid("880e8400-e29b-41d4-a716-446655440003"),
                            OrderId = new Guid("660e8400-e29b-41d4-a716-446655440002"),
                            ProductId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            ProductName = "Wireless Mouse",
                            Quantity = 1,
                            UnitPrice = 29.99m
                        },
                        new
                        {
                            Id = new Guid("880e8400-e29b-41d4-a716-446655440004"),
                            OrderId = new Guid("660e8400-e29b-41d4-a716-446655440002"),
                            ProductId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            ProductName = "USB Cable",
                            Quantity = 1,
                            UnitPrice = 9.99m
                        });
                });

            modelBuilder.Entity("Orders.API.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Orders.API.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Orders.API.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
